// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: special_course.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error)
	GetDetailsOfDevice(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceDetails, error)
	ServerStreaming(ctx context.Context, in *Interface, opts ...grpc.CallOption) (Server_ServerStreamingClient, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) GetDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Devices, error) {
	out := new(Devices)
	err := c.cc.Invoke(ctx, "/special_course.Server/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) GetDetailsOfDevice(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*InterfaceDetails, error) {
	out := new(InterfaceDetails)
	err := c.cc.Invoke(ctx, "/special_course.Server/GetDetailsOfDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ServerStreaming(ctx context.Context, in *Interface, opts ...grpc.CallOption) (Server_ServerStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], "/special_course.Server/ServerStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverServerStreamingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Server_ServerStreamingClient interface {
	Recv() (*StreamReply, error)
	grpc.ClientStream
}

type serverServerStreamingClient struct {
	grpc.ClientStream
}

func (x *serverServerStreamingClient) Recv() (*StreamReply, error) {
	m := new(StreamReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	GetDevices(context.Context, *Empty) (*Devices, error)
	GetDetailsOfDevice(context.Context, *Interface) (*InterfaceDetails, error)
	ServerStreaming(*Interface, Server_ServerStreamingServer) error
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) GetDevices(context.Context, *Empty) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedServerServer) GetDetailsOfDevice(context.Context, *Interface) (*InterfaceDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailsOfDevice not implemented")
}
func (UnimplementedServerServer) ServerStreaming(*Interface, Server_ServerStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreaming not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/special_course.Server/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_GetDetailsOfDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).GetDetailsOfDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/special_course.Server/GetDetailsOfDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).GetDetailsOfDevice(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Interface)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).ServerStreaming(m, &serverServerStreamingServer{stream})
}

type Server_ServerStreamingServer interface {
	Send(*StreamReply) error
	grpc.ServerStream
}

type serverServerStreamingServer struct {
	grpc.ServerStream
}

func (x *serverServerStreamingServer) Send(m *StreamReply) error {
	return x.ServerStream.SendMsg(m)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "special_course.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevices",
			Handler:    _Server_GetDevices_Handler,
		},
		{
			MethodName: "GetDetailsOfDevice",
			Handler:    _Server_GetDetailsOfDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreaming",
			Handler:       _Server_ServerStreaming_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "special_course.proto",
}
